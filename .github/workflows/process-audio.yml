# Nome do workflow que aparecerá na aba "Actions" do GitHub
name: Processar Arquivo de Áudio

# Define o gatilho (trigger) do workflow
on:
  # Permite que o workflow seja disparado manualmente ou via API
  workflow_dispatch:
    # Define os parâmetros de entrada que precisaremos enviar (do nosso front-end)
    inputs:
      audio_url:
        description: 'URL do arquivo de áudio para processar'
        required: true
      model_name:
        description: 'Nome do modelo a ser usado (ex: htdemucs)'
        required: true
      process_method:
        description: 'Método de processamento (MDX-Net ou Demucs)'
        required: true

# Define os trabalhos (jobs) a serem executados
jobs:
  # Nome do nosso job
  process-audio:
    # A máquina virtual que será usada
    runs-on: ubuntu-latest

    # A sequência de passos que o job irá executar
    steps:
      # Passo 1: Baixar o código do nosso repositório para a máquina virtual
      - name: 1. Baixar o código do repositório
        uses: actions/checkout@v4

      # Passo 2: Configurar o ambiente Python
      - name: 2. Configurar o Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      # Passo 3: Instalar dependências do sistema
      - name: 3. Instalar dependências do sistema
        run: |
          sudo apt-get update
          sudo apt-get install -y libsndfile1 ffmpeg

      # Passo 4: Instalar todas as dependências do requirements.txt
      - name: 4. Instalar dependências Python
        run: |
          python -m pip install --upgrade pip
          pip install -r ultimatevocalremovergui-master/requirements.txt

      # Passo 5: Corrigir compatibilidade do PyTorch para modelos Demucs
      - name: 5. Corrigir compatibilidade do PyTorch (Demucs)
        run: |
          sed -i "s/torch.load(path, 'cpu')/torch.load(path, 'cpu', weights_only=False)/g" ultimatevocalremovergui-master/demucs/states.py

      # Passo 6: Criar as pastas onde os modelos ficarão
      - name: 6. Criar diretórios para os modelos
        run: |
          mkdir -p ultimatevocalremovergui-master/models/Demucs_Models/v3_v4_repo
          mkdir -p ultimatevocalremovergui-master/models/MDX_Net_Models

      # Passo 7: Baixar os modelos do nosso Release do GitHub
      - name: 7. Baixar modelos do Release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release download v1.0.0-models --clobber --dir temp_models
          mv temp_models/*.onnx ultimatevocalremovergui-master/models/MDX_Net_Models/
          mv temp_models/*.th ultimatevocalremovergui-master/models/Demucs_Models/v3_v4_repo/
          mv temp_models/*.yaml ultimatevocalremovergui-master/models/Demucs_Models/v3_v4_repo/

      # Passo 8: Executar o nosso script de separação de áudio
      - name: 8. Executar separação de áudio
        run: |
          python ultimatevocalremovergui-master/run_separation.py \
            --model-name "${{ github.event.inputs.model_name }}" \
            --process-method "${{ github.event.inputs.process_method }}" \
            --audio-url "${{ github.event.inputs.audio_url }}"
      
      # Passo 9: Fazer o upload dos resultados como um "artefato"
      - name: 9. Fazer upload dos resultados
        uses: actions/upload-artifact@v4
        with:
          name: arquivos-separados-${{ github.run_id }}
          path: ultimatevocalremovergui-master/outputs/**
